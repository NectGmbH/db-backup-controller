// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/NectGmbH/db-backup-controller/pkg/apis/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseBackupLister helps list DatabaseBackups.
// All objects returned here must be treated as read-only.
type DatabaseBackupLister interface {
	// List lists all DatabaseBackups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DatabaseBackup, err error)
	// DatabaseBackups returns an object that can list and get DatabaseBackups.
	DatabaseBackups(namespace string) DatabaseBackupNamespaceLister
	DatabaseBackupListerExpansion
}

// databaseBackupLister implements the DatabaseBackupLister interface.
type databaseBackupLister struct {
	indexer cache.Indexer
}

// NewDatabaseBackupLister returns a new DatabaseBackupLister.
func NewDatabaseBackupLister(indexer cache.Indexer) DatabaseBackupLister {
	return &databaseBackupLister{indexer: indexer}
}

// List lists all DatabaseBackups in the indexer.
func (s *databaseBackupLister) List(selector labels.Selector) (ret []*v1.DatabaseBackup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DatabaseBackup))
	})
	return ret, err
}

// DatabaseBackups returns an object that can list and get DatabaseBackups.
func (s *databaseBackupLister) DatabaseBackups(namespace string) DatabaseBackupNamespaceLister {
	return databaseBackupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseBackupNamespaceLister helps list and get DatabaseBackups.
// All objects returned here must be treated as read-only.
type DatabaseBackupNamespaceLister interface {
	// List lists all DatabaseBackups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DatabaseBackup, err error)
	// Get retrieves the DatabaseBackup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.DatabaseBackup, error)
	DatabaseBackupNamespaceListerExpansion
}

// databaseBackupNamespaceLister implements the DatabaseBackupNamespaceLister
// interface.
type databaseBackupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseBackups in the indexer for a given namespace.
func (s databaseBackupNamespaceLister) List(selector labels.Selector) (ret []*v1.DatabaseBackup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DatabaseBackup))
	})
	return ret, err
}

// Get retrieves the DatabaseBackup from the indexer for a given namespace and name.
func (s databaseBackupNamespaceLister) Get(name string) (*v1.DatabaseBackup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("databasebackup"), name)
	}
	return obj.(*v1.DatabaseBackup), nil
}
