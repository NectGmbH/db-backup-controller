// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/NectGmbH/db-backup-controller/pkg/apis/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseBackupStorageClassLister helps list DatabaseBackupStorageClasses.
// All objects returned here must be treated as read-only.
type DatabaseBackupStorageClassLister interface {
	// List lists all DatabaseBackupStorageClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DatabaseBackupStorageClass, err error)
	// Get retrieves the DatabaseBackupStorageClass from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.DatabaseBackupStorageClass, error)
	DatabaseBackupStorageClassListerExpansion
}

// databaseBackupStorageClassLister implements the DatabaseBackupStorageClassLister interface.
type databaseBackupStorageClassLister struct {
	indexer cache.Indexer
}

// NewDatabaseBackupStorageClassLister returns a new DatabaseBackupStorageClassLister.
func NewDatabaseBackupStorageClassLister(indexer cache.Indexer) DatabaseBackupStorageClassLister {
	return &databaseBackupStorageClassLister{indexer: indexer}
}

// List lists all DatabaseBackupStorageClasses in the indexer.
func (s *databaseBackupStorageClassLister) List(selector labels.Selector) (ret []*v1.DatabaseBackupStorageClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DatabaseBackupStorageClass))
	})
	return ret, err
}

// Get retrieves the DatabaseBackupStorageClass from the index for a given name.
func (s *databaseBackupStorageClassLister) Get(name string) (*v1.DatabaseBackupStorageClass, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("databasebackupstorageclass"), name)
	}
	return obj.(*v1.DatabaseBackupStorageClass), nil
}
