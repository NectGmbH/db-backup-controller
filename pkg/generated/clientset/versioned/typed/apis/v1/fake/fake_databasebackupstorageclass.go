// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "github.com/NectGmbH/db-backup-controller/pkg/apis/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDatabaseBackupStorageClasses implements DatabaseBackupStorageClassInterface
type FakeDatabaseBackupStorageClasses struct {
	Fake *FakeBackupV1
}

var databasebackupstorageclassesResource = v1.SchemeGroupVersion.WithResource("databasebackupstorageclasses")

var databasebackupstorageclassesKind = v1.SchemeGroupVersion.WithKind("DatabaseBackupStorageClass")

// Get takes name of the databaseBackupStorageClass, and returns the corresponding databaseBackupStorageClass object, and an error if there is any.
func (c *FakeDatabaseBackupStorageClasses) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.DatabaseBackupStorageClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(databasebackupstorageclassesResource, name), &v1.DatabaseBackupStorageClass{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.DatabaseBackupStorageClass), err
}

// List takes label and field selectors, and returns the list of DatabaseBackupStorageClasses that match those selectors.
func (c *FakeDatabaseBackupStorageClasses) List(ctx context.Context, opts metav1.ListOptions) (result *v1.DatabaseBackupStorageClassList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(databasebackupstorageclassesResource, databasebackupstorageclassesKind, opts), &v1.DatabaseBackupStorageClassList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.DatabaseBackupStorageClassList{ListMeta: obj.(*v1.DatabaseBackupStorageClassList).ListMeta}
	for _, item := range obj.(*v1.DatabaseBackupStorageClassList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested databaseBackupStorageClasses.
func (c *FakeDatabaseBackupStorageClasses) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(databasebackupstorageclassesResource, opts))
}

// Create takes the representation of a databaseBackupStorageClass and creates it.  Returns the server's representation of the databaseBackupStorageClass, and an error, if there is any.
func (c *FakeDatabaseBackupStorageClasses) Create(ctx context.Context, databaseBackupStorageClass *v1.DatabaseBackupStorageClass, opts metav1.CreateOptions) (result *v1.DatabaseBackupStorageClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(databasebackupstorageclassesResource, databaseBackupStorageClass), &v1.DatabaseBackupStorageClass{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.DatabaseBackupStorageClass), err
}

// Update takes the representation of a databaseBackupStorageClass and updates it. Returns the server's representation of the databaseBackupStorageClass, and an error, if there is any.
func (c *FakeDatabaseBackupStorageClasses) Update(ctx context.Context, databaseBackupStorageClass *v1.DatabaseBackupStorageClass, opts metav1.UpdateOptions) (result *v1.DatabaseBackupStorageClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(databasebackupstorageclassesResource, databaseBackupStorageClass), &v1.DatabaseBackupStorageClass{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.DatabaseBackupStorageClass), err
}

// Delete takes name of the databaseBackupStorageClass and deletes it. Returns an error if one occurs.
func (c *FakeDatabaseBackupStorageClasses) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(databasebackupstorageclassesResource, name, opts), &v1.DatabaseBackupStorageClass{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDatabaseBackupStorageClasses) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(databasebackupstorageclassesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1.DatabaseBackupStorageClassList{})
	return err
}

// Patch applies the patch and returns the patched databaseBackupStorageClass.
func (c *FakeDatabaseBackupStorageClasses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.DatabaseBackupStorageClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(databasebackupstorageclassesResource, name, pt, data, subresources...), &v1.DatabaseBackupStorageClass{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.DatabaseBackupStorageClass), err
}
