---

{{- $caSecretName := "crdb-ca" -}}
{{- if not (lookup "v1" "Secret" .Release.Namespace $caSecretName) -}}
  {{- $_ := set . "ca" (genCAWithKey $caSecretName (.Values.crdbCA.validityCA | int) (genPrivateKey "rsa")) -}}
{{- else -}}
  {{-
    $_ := set . "ca" (buildCustomCert
                        (index (lookup "v1" "Secret" .Release.Namespace $caSecretName).data "tls.crt")
                        (index (lookup "v1" "Secret" .Release.Namespace $caSecretName).data "tls.key"))
  -}}
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $caSecretName }}
data:
  tls.crt: {{ .ca.Cert | b64enc }}
  tls.key: {{ .ca.Key | b64enc }}

---

{{- $nodeSecretName := printf "%s-node" $caSecretName -}}
{{- if not (lookup "v1" "Secret" .Release.Namespace $nodeSecretName) -}}
  {{-
    $_ := set . "nodeCert" (genSignedCertWithKey
                              "node"
                              (list "127.0.0.1")
                              (
                                list "localhost"
                                     (printf "%s-cockroachdb-public" .Release.Name)
                                     (printf "%s-cockroachdb-public.%s" .Release.Name .Release.Namespace)
                                     (printf "%s-cockroachdb-public.%s.svc.cluster.local" .Release.Name .Release.Namespace)
                                     (printf "*.%s-cockroachdb" .Release.Name)
                                     (printf "*.%s-cockroachdb.%s" .Release.Name .Release.Namespace)
                                     (printf "*.%s-cockroachdb.%s.svc.cluster.local" .Release.Name .Release.Namespace)
                              )
                              (.Values.crdbCA.validityNode | int)
                              .ca
                              (genPrivateKey "rsa"))
  -}}
{{- else -}}
  {{-
    $_ := set . "nodeCert" (buildCustomCert
                              (index (lookup "v1" "Secret" .Release.Namespace $nodeSecretName).data "tls.crt")
                              (index (lookup "v1" "Secret" .Release.Namespace $nodeSecretName).data "tls.key"))
  -}}
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $nodeSecretName }}
data:
  ca.crt: {{ .ca.Cert | b64enc }}
  tls.crt: {{ .nodeCert.Cert | b64enc }}
  tls.key: {{ .nodeCert.Key | b64enc }}

{{- range (concat (list "root") (default (list) .Values.crdbCA.extraUsers)) }}
---

{{- $userSecretName := printf "%s-%s" $caSecretName . -}}
{{- if not (lookup "v1" "Secret" $.Release.Namespace $userSecretName) -}}
  {{- $_ := set $ "userCert" (genSignedCertWithKey . nil nil ($.Values.crdbCA.validityUser | int) $.ca (genPrivateKey "rsa")) -}}
{{- else -}}
  {{-
    $_ := set $ "userCert" (buildCustomCert
                              (index (lookup "v1" "Secret" $.Release.Namespace $userSecretName).data "tls.crt")
                              (index (lookup "v1" "Secret" $.Release.Namespace $userSecretName).data "tls.key"))
  -}}
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $userSecretName }}
data:
  ca.crt: {{ $.ca.Cert | b64enc }}
  tls.crt: {{ $.userCert.Cert | b64enc }}
  tls.key: {{ $.userCert.Key | b64enc }}

{{- end }}

...
